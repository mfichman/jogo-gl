# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Vsync = ENABLED | DISABLED

VideoMode < Value {
    # Defines a windowed or fullscreen video mode (width, height, and bits per
    # pixel). 
    width Int
    height Int
    bits Int 

    @init(w Int, h Int, b Int) {
        width = w
        height = h
        bits = b
    }
}

Window < Object {
    # Creates a window with the size and pixel depth defined in mode.  
    position = Math::Vec2i()
    size = Math::Vec2i()
    title String    
    visible Bool
    vsync Vsync

    @init(mode VideoMode) native {
        # Creates a new Window with the given video mode.
    }

    @destroy() native {
        # Destroys the underlying native window.
    }

    position=(position Math::Vec2i) native {
        # Sets the position of the Window in screen coordinates.
    }

    position?() native Math::Vec2i {
        # Returns the Window position in screen coordinates.
    }

    size=(size Math::Vec2i) native {
        # Sets the size of the Window in screen coordinates.
    }
    
    size?() native Math::Vec2i {
        # Returns the size of the Window in screen coordinates.
    }

    visible=(visible Bool) native {
        # Shows or hides the Window.
    }

    visible?() native Bool {
        # Returns true if the Window is visible.
    }

    current=(current Bool) native {
        # Makes this context current or disables it if 'current' is false.  If
        # 'current' is true, then all future OpenGL calls will use this
        # context.
    }
    
    current?() native Bool {
        # Returns true if this context is the current context.
    }

    display() native {
        # Displays the current context.
    }
}

poll() native {
    # Polls for and processes input events and messages for all Windows.  This
    # function should be called in a loop within a coroutine, with a yield
    # after every poll to give the I/O manager a change to run.
}
