# Copyright (c) 2013 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Matrix < Value {
    # 4x4 transformation matrix value type. 
    m00 mutable Float
    m01 mutable Float
    m02 mutable Float
    m03 mutable Float

    m10 mutable Float
    m11 mutable Float
    m12 mutable Float
    m13 mutable Float

    m20 mutable Float
    m21 mutable Float
    m22 mutable Float
    m23 mutable Float

    m30 mutable Float
    m31 mutable Float
    m32 mutable Float
    m33 mutable Float

    uniform(location Int) native {}
}

perspective(fovy Float, aspect Float, near Float, far Float) Matrix {
    top = (fovy * Math::PI / 360.).tan + near
    bottom = -top
    right = aspect * top
    left = aspect * bottom
    ret frustum(left, right, bottom, top, near, far) 
}

frustum(left Float, right Float, bottom Float, top Float, near Float, far Float) Matrix {
    out = Matrix()
    out.m00 = 2.*near/(right-left)
    out.m01 = 0.
    out.m02 = (right+left)/(right-left)
    out.m03 = 0.
    
    out.m10 = 0.
    out.m11 = 2.*near/(top-bottom)
    out.m12 = (top+bottom)/(top-bottom)
    out.m13 = 0.
    
    out.m20 = 0.
    out.m21 = 0.
    out.m22 = -(far+near)/(far-near)
    out.m23 = -2.*far*near/(far-near)

    out.m30 = 0.
    out.m31 = 0.
    out.m32 = -1.
    out.m33 = 0.
    ret out
}
