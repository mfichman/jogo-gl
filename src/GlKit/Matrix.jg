# Copyright (c) 2013 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Matrix < Value {
    # 4x4 transformation matrix value type. 
    m00 var Float
    m01 var Float
    m02 var Float
    m03 var Float

    m10 var Float
    m11 var Float
    m12 var Float
    m13 var Float

    m20 var Float
    m21 var Float
    m22 var Float
    m23 var Float

    m30 var Float
    m31 var Float
    m32 var Float
    m33 var Float
}

perspective(fovy Float, aspect Float, near Float, far Float) Matrix {
    # Returns a perspective projection matrix transformation
    top = (fovy * Math::PI / 360.).tan * near
    bottom = -top
    right = aspect * top
    left = aspect * bottom
    ret frustum(left, right, bottom, top, near, far) 
}

ortho(left Float, right Float, bottom Float, top Float, near Float, far Float) Matrix {
    # Returns an orthographic projection matrix 
    out = Matrix()
    out.m00 = 2.*near/(right-left)
    out.m01 = 0.
    out.m02 = 0.
    out.m03 = -(right+left)/(right-left)
    
    out.m10 = 0.
    out.m11 = 2./(top-bottom)
    out.m12 = 0.
    out.m13 = -(top+bottom)/(top-bottom)

    out.m20 = 0.
    out.m21 = 0.
    out.m22 = -2./(far-near)
    out.m23 = -(far+near)/(far-near)
    
    out.m30 = 0.
    out.m31 = 0.    
    out.m32 = 0.
    out.m33 = 1.
    ret out
}

frustum(left Float, right Float, bottom Float, top Float, near Float, far Float) Matrix {
    # Returns a matrix for a viewing frustum
    out = Matrix()
    out.m00 = 2.*near/(right-left)
    out.m01 = 0.
    out.m02 = (right+left)/(right-left)
    out.m03 = 0.
    
    out.m10 = 0.
    out.m11 = 2.*near/(top-bottom)
    out.m12 = (top+bottom)/(top-bottom)
    out.m13 = 0.
    
    out.m20 = 0.
    out.m21 = 0.
    out.m22 = -(far+near)/(far-near)
    out.m23 = -2.*far*near/(far-near)

    out.m30 = 0.
    out.m31 = 0.
    out.m32 = -1.
    out.m33 = 0.
    ret out
}

identity() Matrix {
    # Returns the identity matrix
    out = Matrix()
    out.m00 = 1.
    out.m01 = 0.
    out.m02 = 0.
    out.m03 = 0.
    
    out.m10 = 0.
    out.m11 = 1.
    out.m12 = 0. 
    out.m13 = 0.
    
    out.m20 = 0.
    out.m21 = 0.
    out.m22 = 1.
    out.m23 = 0.

    out.m30 = 0.
    out.m31 = 0.
    out.m32 = 0.
    out.m33 = 1.
    ret out
}

translated(x Float, y Float, z Float) Matrix {
    out = Matrix()
    out.m00 = 1. # row 1 
    out.m01 = 0.
    out.m02 = 0.
    out.m03 = x
    
    out.m10 = 0. # row 2
    out.m11 = 1.
    out.m12 = 0. 
    out.m13 = y
    
    out.m20 = 0. # row 3
    out.m21 = 0.
    out.m22 = 1.
    out.m23 = z

    out.m30 = 0. # row 4
    out.m31 = 0.
    out.m32 = 0.
    out.m33 = 1.
    ret out
}
