# Copyright (c) 2013 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

ShaderStatus = LINKED | ERROR

Shader < Object {
    # Represents an GPU program.  Contains a vertex and a fragment shader.
    POSITION_ATTRIB = 0
    NORMAL_ATTRIB = 1
    TEXCOORD_ATTRIB = 2

    id Int
    fragment_shader_id Int
    vertex_shader_id Int
    status ShaderStatus
    log String
    projection_matrix_loc Int
    view_matrix_loc Int
    model_matrix_loc Int

    @init(fragment String, vertex String) {
        # Creates a new GPU program from source; 'frag' is the source for the
        # fragment shader, and 'vertex' is the source for the vertex shader.
        fragment_shader_id = Gl::create_shader(Gl::FRAGMENT_SHADER)
        Gl::shader_source(fragment_shader_id, fragment)
        Gl::compile_shader(fragment_shader_id)
    
        vertex_shader_id = Gl::create_shader(Gl::VERTEX_SHADER)
        Gl::shader_source(vertex_shader_id, vertex)
        Gl::compile_shader(vertex_shader_id)
            
        id = Gl::create_program()
        Gl::attach_shader(id, fragment_shader_id)
        Gl::attach_shader(id, vertex_shader_id)
    
        Gl::bind_attrib_location(id, POSITION_ATTRIB, 'position_in')
        Gl::bind_attrib_location(id, NORMAL_ATTRIB, 'normal_in')
        Gl::bind_attrib_location(id, TEXCOORD_ATTRIB, 'texcoord_in')

        Gl::link_program(id)

        self.check_status()

        projection_matrix_loc = Gl::get_uniform_location(id, 'projection_matrix')
        view_matrix_loc = Gl::get_uniform_location(id, 'view_matrix')
        model_matrix_loc = Gl::get_uniform_location(id, 'model_matrix')
    }
    
    projection=(mat Matrix) {
        # Set the projection matrix uniform (binding is always projection_matrix)
        Gl::uniform_matrix(projection_matrix_loc, mat)
    }
    
    view=(mat Matrix) {
        # Set the view matrix uniform (binding is alwyas view_matrix)
        Gl::uniform_matrix(view_matrix_loc, mat)
    }

    model=(mat Matrix) {
        # Set the model matrix uniform (binding is always model_matrix)
        Gl::uniform_matrix(model_matrix_loc, mat)
    }

    @destroy() {
        # Free the GPU program and associated resources
        Gl::delete_program(id)
        Gl::delete_shader(fragment_shader_id)
        Gl::delete_shader(vertex_shader_id)
    }

    check_status() private native {
        # Checks the status of the shader compilation.
    }
}


