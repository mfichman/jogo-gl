# Copyright (c) 2013 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

ShaderStatus = LINKED | ERROR

Shader < Object {
    # Represents an GPU program.  Contains a vertex and a fragment shader.
    id immutable Int
    fragment_shader_id immutable Int
    vertex_shader_id immutable Int
    status immutable ShaderStatus
    log immutable String

    check_status() native 
}

Shader::@init(fragment String, vertex String) {
    # Creates a new GPU program from source; 'frag' is the source for the
    # fragment shader, and 'vertex' is the source for the vertex shader.
    fragment_shader_id = Gl::create_shader(Gl::FRAGMENT_SHADER)
    Gl::shader_source(fragment_shader_id, fragment)
    Gl::compile_shader(fragment_shader_id)

    vertex_shader_id = Gl::create_shader(Gl::VERTEX_SHADER)
    Gl::shader_source(vertex_shader_id, vertex)
    Gl::compile_shader(vertex_shader_id)
        
    id = Gl::create_program()
    Gl::attach_shader(id, fragment_shader_id)
    Gl::attach_shader(id, vertex_shader_id)
    Gl::link_program(id)

    self.check_status()
}

Shader::@destroy() {
    Gl::delete_program(id)
    Gl::delete_shader(fragment_shader_id)
    Gl::delete_shader(vertex_shader_id)
}

