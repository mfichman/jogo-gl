# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

check() native {

}

main() Int {
    mode = GlKit::VideoMode(800, 600, 32, 24, GlKit::WindowMode::WINDOWED)
    window = GlKit::Window(mode)
    Gl::clear_color(.8, .8, .8, 1.)
    Gl::viewport(0, 0, 800, 600) 

    buf = GlKit::VertexBuffer()
    buf.val3f(-1., -1., 0.)
    buf.val2f(0., 0.) # texcoord

    buf.val3f(-1., 1., 0.)
    buf.val2f(0., 0.)

    buf.val3f(1., 1., 0.)
    buf.val2f(0., 0.)

    buf.val3f(1., -1., 0.)
    buf.val2f(0., 0.)

    buf.state = GlKit::BufferState::SYNCED

    fs = File::open('shaders/Flat.frag', 'r').readall()
    vs = File::open('shaders/Flat.vert', 'r').readall()

    vf = GlKit::VertexFormat()
    vf.attribute("position_in", 3, Gl::FLOAT)
    #vf.attribute("normal_in", 3, Gl::FLOAT)
    vf.attribute("texcoord_in", 2, Gl::FLOAT)

    shader = GlKit::Shader(fs, vs, vf)
    if shader.status == GlKit::ShaderStatus::ERROR {
        Io::println(shader.log)
    }

    Gl::use_program(shader.id)
    shader.projection = GlKit::perspective(60., 800./600., 1., 100.)
    shader.view = GlKit::identity()
    shader.model = GlKit::translated(0., 0., -2.)
    shader.vertices = buf

    while not window.closed {
        Gl::clear(Gl::COLOR_BUFFER_BIT)
        Gl::clear(Gl::DEPTH_BUFFER_BIT)

        shader.draw(Gl::QUADS)
        #buf.draw(Gl::QUADS)
        window.display()
        GlKit::poll()
        yield
    }
    ret 0
}

